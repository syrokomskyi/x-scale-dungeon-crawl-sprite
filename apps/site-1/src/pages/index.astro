---
import Footer from "../components/Footer.astro";
import FullscreenCard from "../components/FullscreenCard.astro";
import Header from "../components/Header.astro";
import ImageCard from "../components/ImageCard.astro";
import Layout from "../layouts/Layout.astro";

const baseUrl = import.meta.env.BASE_URL;

const images = await import("../../public/data/images.json");
const imageList = images.default;
---

<Layout title="Tool for Creating Fan Gallery for Any Roguelike Game">
  <Header />

  <main class="container mx-auto px-4 py-8">
    <div
      id="gallery"
      class="grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
    >
      {
        imageList.map((image) => (
          <ImageCard
            path={image.path}
            name={image.name}
            note={image.note}
            icon={image.icon}
          />
        ))
      }
    </div>
  </main>

  <Footer />

  <FullscreenCard />
</Layout>

<script is:inline define:vars={{ baseUrl, imageList }}>
  let currentFilter = [];

  let isProgrammaticHashChange = false;

  function setHash(hash) {
    isProgrammaticHashChange = true;
    window.location.hash = hash;
  }

  window.closeFullscreen = function () {
    const overlay = document.getElementById("fullscreen-overlay");
    overlay.classList.remove("flex");
    overlay.classList.add("hidden");
    setHash("");
  };

  function openFullscreenCard(path, name, note, icon) {
    document.dispatchEvent(
      new CustomEvent("openFullscreen", {
        detail: { path, name, note, icon },
      })
    );
  }

  function openCardByPath(path) {
    const image = imageList.find((img) => img.path === path);
    if (image) {
      openFullscreenCard(image.path, image.name, image.note, image.icon);
    }
  }

  function getPathFromHash() {
    const hash = window.location.hash.slice(1);
    return hash ? decodeURIComponent(hash) + ".webp" : null;
  }

  window.addEventListener("hashchange", () => {
    if (isProgrammaticHashChange) {
      isProgrammaticHashChange = false;
      return;
    }
    const path = getPathFromHash();
    if (path) {
      openCardByPath(path);
    } else {
      window.closeFullscreen();
    }
  });

  window.addEventListener("filterChange", (e) => {
    currentFilter = e.detail.selected;
    filterGallery();
  });

  function filterGallery() {
    const gallery = document.getElementById("gallery");
    const cards = gallery.querySelectorAll(".image-card");
    cards.forEach((card) => {
      const path = card.dataset.path;
      const show =
        currentFilter.length === 0 ||
        path.startsWith("redraw-v1/" + currentFilter.join("/") + "/");
      card.style.display = show ? "" : "none";
    });
  }

  // Shuffle the gallery cards on load
  function shuffleGallery() {
    const gallery = document.getElementById("gallery");
    const cards = Array.from(gallery.children);
    for (let i = cards.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [cards[i], cards[j]] = [cards[j], cards[i]];
    }
    cards.forEach((card) => gallery.appendChild(card));
  }

  // Shuffle on DOM content loaded
  document.addEventListener("DOMContentLoaded", () => {
    shuffleGallery();

    // Add overlay click listener
    const overlay = document.getElementById("fullscreen-overlay");
    if (overlay) {
      overlay.addEventListener("click", window.closeFullscreen);
    }

    // Check initial hash
    if (window.location.hash) {
      const hash = window.location.hash.slice(1);
      const path = decodeURIComponent(hash) + ".webp";
      openCardByPath(path);
    }

    // Add click listeners to images
    const images = document.querySelectorAll(".image-card img");
    images.forEach((img) => {
      img.addEventListener("click", () => {
        const card = img.closest(".image-card");
        const path = card.dataset.path;
        const name = img.alt;
        const note = card.dataset.note;
        const icon = card.dataset.icon;
        openFullscreenCard(path, name, note, icon);
        setHash(encodeURIComponent(path.replace(".webp", "")));
      });
    });
  });

  // Check initial hash after setup
  const initialPath = getPathFromHash();
  if (initialPath) {
    openCardByPath(initialPath);
  }
</script>
