---
import { Image } from "astro:assets";
import { thumbHashToDataURL } from "thumbhash";

interface Props {
  path: string;
  width: number;
  height: number;
  placeholder: string;
  name: string;
  note: string;
  icon: string;
  video: string;
}

const baseUrl = import.meta.env.BASE_URL;

const { path, width, height, placeholder, name, note, icon, video } =
  Astro.props;

const dataPlaceholder = thumbHashToDataURL(
  Uint8Array.from(atob(placeholder), (c) => c.charCodeAt(0))
);

const noteId = `note-${path.replace(/\//g, "-")}`;
const toggleId = `toggle-note-${path.replace(/\//g, "-")}`;

function randomHeartbeatDelay() {
  const delay = (Math.random() - 0.5) * 0.24;
  return `${delay.toFixed(3)}s`;
}
---

<div
  class="image-card bg-black/20 backdrop-blur-sm rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow"
  data-path={path}
  data-note={note}
  data-icon={icon}
  data-video={video}
>
  <div class="relative" style={`aspect-ratio: ${width} / ${height};`}>
    <img
      src={dataPlaceholder}
      width={width}
      height={height}
      alt={name}
      class="absolute inset-0 w-full h-full object-cover z-0 blur-lg"
    />
    <img
      src={`${baseUrl}/${path}`.replace("//", "/")}
      width={width}
      height={height}
      alt={name}
      title={[name, note].filter((s) => s).join(" | ")}
      class="w-full h-full object-contain cursor-pointer absolute inset-0 opacity-0 transition-opacity duration-1200"
      loading="lazy"
      onload="this.style.opacity=1"
    />
  </div>
  <div class="p-4">
    <h3
      class="flex items-start text-lg text-white mb-2 md:text-base sm:text-sm"
    >
      {
        icon && (
          <Image
            src={`${baseUrl}/${icon}`.replace("//", "/")}
            width={32}
            height={32}
            alt={name}
            class="shrink-0 w-6 h-6 mr-2 heartbeat"
            style={`animation-delay: ${randomHeartbeatDelay()}`}
            loading="lazy"
          />
        )
      }
      <span>{name}</span>
      {
        note && (
          <button
            id={toggleId}
            class="heartbeat text-gray-300 hover:text-white transition-colors ml-2"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              fill="currentColor"
              viewBox="0 0 16 16"
              class="inline"
            >
              <path
                d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"
              ></path>
              <path
                d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"
              ></path>
            </svg>
          </button>
        )
      }
    </h3>
    {
      note && (
        <p
          class="text-base text-gray-300 mt-1 mb-1 px-4 md:text-sm sm:text-xs hidden"
          id={noteId}
        >
          {note}
        </p>
      )
    }
  </div>
</div>

{
  note && (
    <script is:inline define:vars={{ toggleId, noteId }}>
      const toggleButton = document.getElementById(toggleId);
      const descriptionText = document.getElementById(noteId);
      if (toggleButton && descriptionText) {
        toggleButton.addEventListener("click", () => {
          descriptionText.classList.toggle("hidden");
        });
      }
    </script>
  )
}
