---
import Filter from "./Filter.astro";
---

<header
  class="fixed top-0 left-0 right-0 z-50 bg-gray-900/90 backdrop-blur-none md:bg-white/10 md:backdrop-blur-md transition-transform duration-300"
>
  <div class="container mx-auto px-4 py-4 flex justify-between items-start">
    <div></div>
    <div class="text-center">
      <h1 class="text-xl text-white md:text-lg sm:text-base">Tool</h1>
      <h2 class="text-2xl text-white md:text-xl sm:text-lg">
        Creating Fan Gallery
      </h2>
      <h3 class="text-xl text-white md:text-lg sm:text-base">
        any Roguelike Game
      </h3>
      <a
        href="https://github.com/syrokomskyi/x-scale-dungeon-crawl-sprite"
        class="text-sm md:text-xs sm:text-xs mt-2 mb-2 bg-gray-800 hover:bg-gray-700 text-white px-3 py-1 rounded-md font-medium transition-colors items-center gap-2 inline-flex"
        target="_blank"
        rel="noopener noreferrer"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          fill="currentColor"
          viewBox="0 0 16 16"
        >
          <path
            d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"
          ></path>
        </svg>
        GitHub
      </a>
      <div class="relative">
        <button
          id="info-toggle"
          class="heartbeat text-gray-300 hover:text-white transition-colors mt-1 mb-4"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            fill="currentColor"
            viewBox="0 0 16 16"
            class="inline"
          >
            <path
              d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"
            ></path>
            <path
              d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"
            ></path>
          </svg>
        </button>
        <h6
          id="description-text"
          class="text-base text-gray-300 mt-1 mb-6 px-4 md:text-sm sm:text-xs hidden"
        >
          The goal of this project is to demo the capabilities of a tool that
          allows every fan of the Game to draw high-quality images from their
          favorite Game. Any Game. Even if you can't draw. Demo: <a
            href="https://github.com/crawl/crawl"
            target="_blank"
            rel="noopener noreferrer">DCSS</a
          >.
        </h6>
      </div>
      <Filter />
    </div>
    <div></div>
  </div>
</header>

<script is:inline>
  let lastScrollY = window.scrollY;
  let isHidden = false;
  const header = document.querySelector("header");

  function adjustBodyPadding() {
    const headerHeight = header.offsetHeight;
    document.body.style.paddingTop = headerHeight + "px";
  }

  // Call immediately to prevent jump of gallery
  adjustBodyPadding();

  window.addEventListener("load", adjustBodyPadding);
  window.addEventListener("resize", adjustBodyPadding);

  window.addEventListener("scroll", () => {
    const currentScrollY = window.scrollY;
    if (currentScrollY > lastScrollY && currentScrollY > 100 && !isHidden) {
      header.classList.add("translate-y-[-100%]");
      isHidden = true;
    } else if (currentScrollY < lastScrollY && isHidden) {
      header.classList.remove("translate-y-[-100%]");
      isHidden = false;
    }
    lastScrollY = currentScrollY;
  });

  // Toggle description text
  const toggleButton = document.getElementById("info-toggle");
  const descriptionText = document.getElementById("description-text");
  toggleButton.addEventListener("click", () => {
    descriptionText.classList.toggle("hidden");
  });

  // Animation for subtitle
  const h3 = document.querySelector("h3");
  const originalText = h3.textContent.trim();
  const positions = [];
  for (let i = 0; i < originalText.length; i++) {
    if (originalText[i] !== " ") {
      positions.push(i);
    }
  }
  let currentIndex = -1;

  function updateText() {
    if (currentIndex !== -1) {
      // Restore previous letter
      const pos = positions[currentIndex];
      h3.innerHTML =
        originalText.slice(0, pos) +
        originalText[pos] +
        originalText.slice(pos + 1);
    }
    // Pick new random position
    currentIndex = Math.floor(Math.random() * positions.length);
    const newPos = positions[currentIndex];
    const a = originalText.slice(0, newPos);
    const b = originalText.slice(newPos + 1);
    h3.innerHTML = `${a}<span class='heartbeat'>@</span>${b}`;
    // Schedule next update with random delay
    const delay = 1000 + Math.random() * 5000;
    setTimeout(updateText, delay);
  }

  // Start animation after initial delay
  setTimeout(updateText, 3000);
</script>
